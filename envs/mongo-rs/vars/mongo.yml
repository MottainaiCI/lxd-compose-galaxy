envs:

{{ if .Values.mongo.enterprise }}
  mongo_repo_url: "http://repo.mongodb.com/apt/ubuntu bionic/mongodb-enterprise/"
  mongo_repo_file: "/etc/apt/sources.list.d/mongodb-enterprise.list"
{{ else }}
  mongo_repo_url: "https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/"
  mongo_repo_file: "/etc/apt/sources.list.d/mongodb-org-{{ .Values.mongo.version }}.list"
{{ end }}

  mongodb_replica_set:

    net_domain: "mottainai.local"

    name: "rs0"

    superuser:
      db: "admin"
      user: "admin"
      pwd: "pass"
      roles:
        - role: "root"
          db: "admin"

    users:
      - db: "admin"
        user: "user"
        pwd: "user0"
        roles:
          - role: "readWrite"
            db: "mydb"

      - db: "admin"
        user: "user2"
        pwd: "user0"
        roles:
          - role: "readWrite"
            db: "mydb"

  mongo_key: |
    KNClV4herimCMYP2srq7WIJdNrkef5+Q/qNmOvFjFFR4QHV/nRvJAuqEkvafmRVK
    iKGZZmR9MCmIXYxb4g7m1j4jSUF4IREspcr1gBWevPMm+TZ02U0hoh2te65D/6q6
    xQqQXuqsYzblN9Qo+cR/7839LrvKmlmobNvI6osCwM8cacHCq9uW4/5aEbLsKPUU
    JqHwKhH6r8KxL9JeLPJ38KZwqGQ/yzQJT/mPNcXoQnXtswCbaCYQYBGVAOy8p1K6
    pWjzs3abRfO86aW58y3DwkuiSCSx4jMrNTMAIPZrgpEd4xYUmBkbxt3s96jpq02w
    hJyFH0CBiQNqDvaGrgtyV3eWlUMRgWxceOtK9UA7vh2mCHX9tqGs0FFCRIOKxZR9
    exWj1BITMm0v7dy8o/VD99uN1tuk5iKlY+YADj/01JBU+uh10dWw3vQ5Q2vB9Pbm
    izcmRVgevDyKwvuhKsNImULlFfYRPJT6yZfHdvQc2Ru1b2dCw3MO69/CTpKh1XCk
    5U2uC7k6vPKftea6T4thuRYap/R1Gc5YiEmnKkzpzdtEMjFtckK3tOj5Eu9cyxAP
    hwCZ+0EEQqYtD7yBNQUEBiWrFNFYFv+bvAm5zmEh81PdmW+yu7Gw3U5VXhRKNVG9
    nxi4VXQgXWLZxjMSg4ZCWox7/6QWbbY+/lUM5M6LvFkSf5GxYySkTrqS9JJFF7l7
    M9dYfcqE8EyG022aKxR7PdAnYzcSbteJBVZJmEewNKfViBBAW+ZT+OWy6eayDnVp
    5zzrDXNG5gBY+OIj/yZXuRKqRjGUsZGyPtz0TGG3P+0RIH/me62XNkgXRmfvwTL2
    TGbBoDT0q6wmm92sMPCYSoIJXiryGz2AdBmuwRrZ0L5Jog82dy9HHspZYipRFW3k
    dEQrzq1XCSJWkunpCTaNPSjD8jET93OD/NeexDgZDWjfzjvIOsXHhYrao2fN0qoR
    J/UkPzU8aclzPr1fTRQH5mYRtZOCmZACzocJVA5sZtJwU99P

  mongo_config:
    storage:
      dbPath: "/var/lib/mongodb"

    net:
      port: 27017

    security:
      keyFile: "/etc/mongodb.key"

    systemLog:
      destination: file
      logAppend: true
      path: "/var/log/mongodb/mongod.log"

    replication:
      replSetName: "rs0"

  mongo_crypto:
    keymgmt: |
      print(`mongo_host=${mongo_host}`)
      print(`mongo_root_user=${mongo_root_user}`)
      print(`mongo_root_password=${mongo_root_password}`)
      print(`encryption_master_key=${encryption_master_key}`)
      print(`encryption_client_key=${encryption_client_key}`)
      print(`dbtest=${dbtest}`)
      var ClientSideFieldLevelEncryptionOptions = {
          "keyVaultNamespace": "encryption.__datakeys",
          "kmsProviders": {
              "local": {
                  "key": BinData(0, `${encryption_master_key}`)
              }
          }
      }
      var connection = Mongo(
          `mongodb://${mongo_root_user}:${mongo_root_password}@${mongo_host}:27017/`,
          ClientSideFieldLevelEncryptionOptions
      )
      var keyVault = connection.getKeyVault()

    getConnection: |
      print(`mongo_host=${mongo_host}`)
      print(`mongo_root_user=${mongo_root_user}`)
      print(`mongo_root_password=${mongo_root_password}`)
      print(`encryption_master_key=${encryption_master_key}`)
      print(`encryption_client_key=${encryption_client_key}`)
      print(`dbtest=${dbtest}`)
      var connection = Mongo(
          `mongodb://${mongo_root_user}:${mongo_root_password}@${mongo_host}:27017/`
      )

    createkey: |
      var uuid = keyVault.createKey(
          "local",
          ["keylocal"]
      )

    exitjs: |
      exit
      
    getkeys: |
      var localkey = keyVault.getKeys().toArray()[0]._id
      print(`localkey=${localkey}`)

    exportKeys: |
      let base64data = localkey.toJSON();
      print(`###@@@###${base64data}###@@@###`)

    importKeys: |
      //let base64data = 'c3RhY2thYnVzZS5jb20=';
      let base64data = encryption_client_key;
      localkey = BinData(3, base64data)

    testfindclassic: |
      print('#####################################')
      print('find data in collections ')
      print('with client without encrytion active')
      print('#####################################')
      print('------------------------')
      print('collection test1')
      print('------------------------')
      db.test1.find()
      print('------------------------')
      print('collection test2_enc')
      print('------------------------')
      db.test2_enc.find()

    testfindcrypto: |
      print('#########################')
      print('find data in collections ')
      print('#########################')
      myDB = connection.getDB(dbtest);
      myColl = myDB.getCollection("test1");
      print('------------------------')
      print('collection test1')
      print('------------------------')
      cursor = myColl.find()
      while ( cursor.hasNext() ) {
         printjson( cursor.next() );
      }
      print('------------------------')
      print('collection test2_enc')
      print('------------------------')
      myColl = myDB.getCollection("test2_enc");
      cursor = myColl.find()
      while ( cursor.hasNext() ) {
         printjson( cursor.next() );
      }
        
    testinsertcrypto: |
      print('insert in collection test2_enc value encrypted')
      myDB = connection.getDB(dbtest);
      clientEncryption = connection.getClientEncryption();
      var encval = clientEncryption.encrypt( localkey, "value encrypted", "AEAD_AES_256_CBC_HMAC_SHA_512-Random");
      myColl = myDB.getCollection("test2_enc");
      myColl.insertOne({ f1: 1000, f2: encval});

    testinsertnormal: |
      print('insert in collection test1 value not encrypted')
      myDB = connection.getDB(dbtest);
      myColl = myDB.getCollection("test1");
      myColl.insertOne({ f1: 1000, f2: "value not encrypted"});

