version: "1"

template_engine:
  engine: "mottainai"

include_profiles_files:
- ../common/profiles/net-mottainai0.yml
- ../common/profiles/default.yml

projects:

  - name: "mongo-replica-set"
    description: |
      Setup MongoDB Replica Set with 3 or more nodes.

    # Environments files to use with engine. Supported files depends on
    # template engine
    include_env_files:
      - vars/mongo.yml

    vars:
      - envs:

          ubuntu_packages:
            - gpg
            - ca-certificates
            - apt-transport-https
            - language-pack-en
            - openssh-client
            - vim
            - systemd
            # net tools
            - net-tools
            - iproute2
            - iputils-ping

          # Packages installed after the setup of the
          # MongoDB repository
            # - mongodb-enterprise
{{ if .Values.mongo.enterprise }}
          packages:
            - mongodb-enterprise-server
            - mongodb-enterprise-shell
            - mongodb-enterprise-mongos
            - mongodb-enterprise-tools
{{ else }}
          packages:
            - mongodb-org-server
            - mongodb-org-shell
            - mongodb-org-mongos
            - mongodb-org-tools
{{ end }}

    groups:
      - name: "mongo-databases"
        description: "MongoDB Databases"

        connection: "{{ .Values.connection }}"
        # Define the list of LXD Profile to use
        # for create the containers
        common_profiles:
          - default
          - net-mottainai0

        # Create the environment container as ephemeral or not.
        ephemeral: {{ .Values.ephemeral }}

        include_hooks_files:
          - ../common/hooks/ubuntu-setup.yml

        hooks:
          - event: post-group
            node: mongo-rs1
            flags:
              - cluster_setup
            commands:
              - >-
                export user=$(echo ${mongodb_replica_set} | jq '.superuser.user' -r) ;
                export pass=$(echo ${mongodb_replica_set} | jq '.superuser.pwd' -r) ;
                set -x ;
                if [ ! -e /.cluster-configured ] ; then
                chmod a+x /tmp/mongo-setup.sh &&
                sleep 5 &&
                eval 'echo "rs.initiate()" | mongo' &&
                /tmp/mongo-setup.sh "admin" &&
                /tmp/mongo-setup.sh "join" &&
                /tmp/mongo-setup.sh "users" &&
                echo "db.disableFreeMonitoring()" | mongo -u "${user}" -p "${pass}" admin ;
                touch /.cluster-configured ;
                fi
              - rm /tmp/mongo-setup.sh

          - event: post-group
            node: mongo-rs1
            flags:
              - cluster_status
            commands:
              - >-
                user=$(echo ${mongodb_replica_set} | jq '.superuser.user' -r) &&
                pass=$(echo ${mongodb_replica_set} | jq '.superuser.pwd' -r) &&
                echo "printjson(rs.status())" | mongo -u "${user}" -p "${pass}" admin

{{ if .Values.mongo.enterprise }}
          - event: post-group
            node: host
            flags:
              - disclaimer
            commands:
              - |
                echo "
                ATTENTION!!: The MongoDB Enterprise version is under a commercial license.
                             Contact the MongoDB Support/Sales for the detail.
                             You can use this deploy only for study and development.
                "
{{ end }}

        nodes:
{{ $nodes := .Values.mongo.replicaset_nodes|int }}
{{ $source := .Values.default_ubuntu_lts_image }}
{{ range $i := until $nodes }}
{{ $instance := add1 $i }}

          - name: mongo-rs{{ $instance }}
            image_source: "{{ $source }}"
            entrypoint:
              - "/bin/bash"
              - "-c"

            # List of commands executed just after the creation of the
            # container.
            hooks:

              - event: post-node-creation
                flags:
                  - setup
                commands:
                  # Setup MongoDB repository
                  - wget -qO - https://www.mongodb.org/static/pgp/server-{{ $.Values.mongo.version }}.asc | sudo apt-key add -
                  - |
                    echo "deb [ arch=amd64 ] ${mongo_repo_url}{{ $.Values.mongo.version }} multiverse" | tee ${mongo_repo_file}
                  - apt-get update

              - event: post-node-creation
                flags:
                  - setup
                commands:
                  - apt-get install -y $(echo ${packages} | jq '.[]' -r)
                  - apt-get clean

              - event: post-node-sync
                commands:
                  - >-
                    echo "${mongo_key}" > /tmp/mongodb.key &&
                    echo "${mongo_config}" | yq r -P - > /tmp/config.yml
                  - |
                    domain=$(echo "${mongodb_replica_set}" | jq '.net_domain' -r) && \
                    yq w /tmp/config.yml net.bindIp "localhost, $(hostname).${domain}" > /etc/mongod.conf
                  - cat /etc/mongod.conf
                  - mv /tmp/mongodb.key /etc/mongodb.key
                  - >-
                    chown mongodb:mongodb /etc/mongodb.key &&
                    chmod go-rwx /etc/mongodb.key &&
                    systemctl enable mongod &&
                    systemctl restart mongod
                  - tail -n 10 /var/log/mongodb/mongod.log
                  - systemctl status mongod

              - event: pre-node-sync
                flags:
                  - clean_sync
                commands:
                  - rm /tmp/mongo-setup.sh || true

            sync_resources:
              - source: files/mongo-setup.sh
                dst: /tmp/mongo-setup.sh

{{ end }}
