version: "1"

template_engine:
  engine: "mottainai"

include_profiles_files:
- ../common/profiles/privileged.yml
- ../common/profiles/net-mottainai0.yml
- ../common/profiles/default.yml
- ../common/profiles/docker.yml
- ../common/profiles/loop.yml
- ../common/profiles/flavor-medium.yml

projects:

  - name: "mottainai-agent"
    description: |
      Setup Mottainai Agent as LXD Container.

      You can configure the agent key and token directly
      on the var file or through the env variables.

      $> lxd-compose a mottainai-agent \
        --env 'MOTTAINAI_ADMIN_USER=admin' \
        --env 'MOTTAINAI_ADMIN_PASS=pass' \
        --env 'MOTTAINAI_TOKEN=xxxx'

      or with --vars-file <credentials-file>.

      Other options:

      --disable-flag: docker to disable container docker setup.

      --render-env 'agentname=mott-agent': to override
        default node name.

    # Environments files to use with engine. Supported files depends on
    # template engine
    include_env_files:
      - vars/mottainai-agent.yml

    vars:
      - envs:
          luet_packages:
            - dev-util/mottainai-agent
            - dev-util/mottainai-cli
            - utils/yq
            - utils/jq

          ubuntu_packages:
            - docker.io
            - bridge-utils

          LUET_NOLOCK: "true"
          LUET_YES: "true"
          internal_domain: {{ .Values.default_internal_domain }}

    groups:
      - name: "mottainai-agents"
        description: "Mottainai Agent"

        ephemeral: {{ .Values.ephemeral }}
        connection: "{{ .Values.connection }}"
        common_profiles:
          - default
          - net-mottainai0

        include_hooks_files:
          - ../common/hooks/ubuntu-setup.yml
          - ../common/hooks/luet-packages.yml

        nodes:
          - name: {{ .Values.agentname | default "mottainai-agent-amd64-1" }}
            image_source: "{{ .Values.default_ubuntu_image }}"
            image_remote_server: "images"

            entrypoint:
              - "/bin/bash"
              - "-c"

            # Define the list of LXD Profile to use in additional
            # to group profiles for create the containers
            profiles:
{{ if .Values.mottainai.agent_docker_local }}
              - docker
{{ end }}
{{ if .Values.mottainai.privileged_containers }}
              - privileged
{{ end }}
              - loop

            # List of commands executed just after the creation of the
            # container.
            hooks:

              - event: post-node-creation
                commands:
                  - chown mottainai-agent:mottainai /srv/mottainai/
                  - mkdir /srv/mottainai/lxc -p || true

              - event: post-node-creation
                flags:
                  - docker
                commands:
                  - gpasswd -a mottainai-agent docker
{{ if .Values.mottainai.agent_docker_local }}
                  - >-
                    systemctl daemon-reload && systemctl start docker
{{ else }}
                  - >-
                    systemctl stop docker.socket docker &&
                    systemctl disable docker
{{ end }}

              - event: pre-node-sync
                flags:
                  - update-mottainai
                commands:
                  - >-
                    luet repo update &&
                    luet upgrade &&
                    luet cleanup --purge-repos
{{ if .Values.mottainai.agent_lxd_config_dir_sync }}
                  - rm /srv/mottainai/lxc -rf || true
{{ end }}

              # I need load mottainai certificate under /etc/ssl/certs.
              # I can't do this in post-node-creation.
              - event: post-node-sync
                flags:
                  - create_token_and_akey
                commands:
                  # TODO: modify node create with --json option when new release will be available.
                  - >-
                    if [ "$DEBUG" = "true" ] ; then set -x ; fi ;
                    export mottainai_url=$(echo ${agent_config} | jq -r .web.application_url) ;
                    echo "Using mottainai URL ${mottainai_url}" ;
                    mott_akey=$(echo ${agent_config} | jq -r .agent.agent_key) ;
                    if [ "${mott_akey}" == "" ] ; then
                    if [ -z "${MOTTAINAI_ADMIN_USER}" ] ; then echo "Missing MOTTAINAI_ADMIN_USER" ; exit 1 ; fi ;
                    if [ -z "${MOTTAINAI_ADMIN_PASS}" ] ; then echo "Missing MOTTAINAI_ADMIN_PASS" ; exit 1 ; fi ;
                    if [ ! -e /etc/mottainai/.agent-key.yml ] ; then
                    echo "Creating agent key..." ;
                    auth_opts="-m ${mottainai_url} --apiPass ${MOTTAINAI_ADMIN_PASS} --apiUser ${MOTTAINAI_ADMIN_USER}" ;
                    res=$(mottainai-cli node create ${auth_opts} | grep ID) ;
                    if [ $? -ne 0 ] ; then echo "Error on create agent key" ; exit 1 ; fi ;
                    nodeid=$(echo $res | awk '{ print $2 }') ;
                    echo ${res} > /etc/mottainai/.agent-key.yml ;
                    akey=$(mottainai-cli node list ${auth_opts} --json | jq ".[] | select(.ID==\"$nodeid\") | .key" -r) ;
                    echo "akey: ${akey}" >> /etc/mottainai/.agent-key.yml ;
                    echo "Created node ${nodeid} agent key ${akey}." ;
                    fi ;
                    fi
                  - >-
                    export mottainai_url=$(echo ${agent_config} | jq -r .web.application_url) ;
                    if [ ! -e /etc/mottainai/.agent-token.yml ] ; then
                    auth_opts="-m ${mottainai_url} --apiPass ${MOTTAINAI_ADMIN_PASS} --apiUser ${MOTTAINAI_ADMIN_USER}" ;
                    mottainai-cli task list ${auth_opts} ;
                    mottainai-cli token create ${auth_opts} --json > /tmp/json ;
                    cat /tmp/json ;
                    MOTTAINAI_TOKEN=$(cat /tmp/json | jq -r .data) &&
                    echo "token: $MOTTAINAI_TOKEN" > /etc/mottainai/.agent-token.yml ;
                    cat /etc/mottainai/.agent-token.yml ;
                    fi

              - event: post-node-sync
                flags:
                  - update-mottainai
                  - update-config
                commands:
                  - echo "${agent_config}" | yq r -P -
                  - echo "${agent_config}" | yq r -P - > /tmp/mottainai-agent.yaml
                  - mv /tmp/mottainai-agent.yaml /etc/mottainai/
{{ if .Values.mottainai.agent_lxd_config_dir_sync }}
                  - mv /srv/mottainai/lxd-conf /srv/mottainai/lxc
{{ end }}
                  - chown mottainai-agent:mottainai -R /srv/mottainai/lxc
                  - chown mottainai-agent:mottainai -R /etc/mottainai
                  - ls -l /srv/mottainai/lxc

                  - >-
                    if [ -e /etc/mottainai/.agent-token.yml ] ; then
                    MOTTAINAI_TOKEN="$(yq r /etc/mottainai/.agent-token.yml 'token')" &&
                    yq w /etc/mottainai/mottainai-agent.yaml 'agent.api_key' "$MOTTAINAI_TOKEN" -i ;
                    echo "Setting token $MOTTAINAI_TOKEN" ;
                    fi ;
                    if [ -e /etc/mottainai/.agent-key.yml ] ; then
                    MOTTAINAI_AKEY="$(yq r /etc/mottainai/.agent-key.yml 'akey')" &&
                    yq w /etc/mottainai/mottainai-agent.yaml 'agent.agent_key' "$MOTTAINAI_AKEY" -i ;
                    fi
                  - systemctl restart mottainai-agent
                  - sleep 2
                  - systemctl status mottainai-agent -n 100

            sync_resources:
{{ if .Values.mottainai.agent_lxd_config_dir_sync }}
              # Default source path is the directory of the env file.
              # Note: The path must be a directory with name lxd-conf
              - source: {{ .Values.mottainai.agent_lxd_local_dir }}
                dst: /srv/mottainai/
{{ end }}
              - source: ../mottainai-server/files/certs/server.crt
                dst: /etc/ssl/certs/mottainai.crt
