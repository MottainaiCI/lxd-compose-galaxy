# Author: Daniele Rondina, geaaru@funtoo.org
# Description: Setup LXD environment.

version: "1"

template_engine:
  engine: "mottainai"

include_profiles_files:
- ../common/profiles/net-mottainai0.yml
- ../common/profiles/default.yml
- ../common/profiles/flavor-medium.yml
- ../common/profiles/loop.yml
- ../common/profiles/docker.yml
- ../common/profiles/privileged.yml

include_networks_files:
- ../common/networks/mottainai0.yml
- ../common/networks/ovs0.yml

include_storage_files:
- ../common/storages/dir-source.yml
- ../common/storages/btrfs-source.yml
- ../common/storages/btrfs-loopback.yml
- ../common/storages/zfs-source.yml
- ../common/storages/zfs-loopback.yml
- ../common/storages/lvm-source.yml
- ../common/storages/lvm-loopback.yml
- ../common/storages/ceph.yml

include_commands_files:

projects:

  - name: "lxd-setup-and-test"
    description: |
      Setup LXD instance and test container.

      NOTE: You need jq cli tool.

    include_env_files:
      - vars/common.yaml

    {{ $os := .Values.os | default "unknown" }}

    vars:
      - envs:
          LUET_NOLOCK: "true"
          LUET_YES: "true"
          SUDO: "sudo"
          os: {{ $os }}

          {{ if eq $os "funtoo" }}
          funtoo_packages: app-emulation/lxd net-misc/bridge-utils app-misc/jq
          {{ end }}

          {{ if eq $os "macaroni" }}
          luet_packages:
            - app-emulation/lxd
            - net-misc/bridge-utils
          {{ end }}

          {{- if eq $os "ubuntu" }}
          ubuntu_packages: uidmap
          {{- end }}


    hooks:

      - event: pre-project
        node: "host"
        flags:
          - install_packages
        commands:

        {{ if eq $os "funtoo" }}
        - emerge -j ${funtoo_packages} -t -u
        # Setup bootstrap auto starting of the needed service
        - >-
          rc-update add lxd &&
          rc-update add lxcfs &&
          /etc/init.d/lxd start &&
          sleep 3 &&
          /etc/init.d/lxd status &&
          lxc list
        {{ end }}

        {{ if eq $os "macaroni" }}
        - luet repo update
        - >-
          jq --help 2>&1 1>/dev/null ; yq_present=$? ;
          if [ ${yq_present} -ne 0 ] ; then
          luet i -y utils/jq ;
          fi

        - >-
          luet i -y $(echo ${luet_packages} | jq '.[]' -r) &&
          luet cleanup
        # Setup bootstrap auto starting of the needed service
        - >-
          rc-update add lxd &&
          rc-update add lxcfs &&
          /etc/init.d/lxd start &&
          sleep 3 &&
          /etc/init.d/lxd status &&
          lxc list
        {{ end }}

        {{ if eq $os "ubuntu" }}
        - >-
            apt-get update &&
            apt-get install ${ubuntu_packages} &&
            apt-get clean
        {{ end }}

      - event: pre-project
        node: "host"
        flags:
          - lxd_init
        commands:
        # Initialize LXD with the selected configuration.
        # TODO: Integrate the cluster configuration too.
        - >-
          echo ${lxd_config} | yq r -P - | lxd init --preseed

      - event: pre-project
        node: "host"
        flags:
          - setup_lxc
        commands:
          - >-
            rm /etc/subuid || true ;
            touch /etc/subuid
          - >-
            rm /etc/subgid || true ;
            touch /etc/subgid
          # Setup subuid/subuid users and mappings
          - >-
            for i in $(echo "${lxc_subuids}" | jq .[].user -r) ; do
            elem=$(echo "${lxc_subuids}" | jq ".[] | select(.user==\"$i\")") ;
            home=$(echo "${elem}" | jq '.home' -r) ;
            map=$(echo "${elem}" | jq '.map' -r) ;
            echo "usermod --add-subuids ${map} ${i}" ;
            $SUDO usermod --add-subuids "${map}" "${i}" ;
            chmod a+x ${home} ;
            done
          - cat /etc/subuid
          - >-
            for i in $(echo "${lxc_subgids}" | jq .[].user -r) ; do
            elem=$(echo "${lxc_subgids}" | jq ".[] | select(.user==\"$i\")") ;
            home=$(echo "${elem}" | jq '.home' -r) ;
            map=$(echo "${elem}" | jq '.map' -r) ;
            $SUDO usermod --add-subgids "${map}" "${i}" ;
            chmod a+x ${home} ;
            done
          - cat /etc/subgid
          # Check if it's yet needed or if we could to use the capabilities.
          - >-
            chmod 4755 /usr/bin/newuidmap &&
            chmod 4755 /usr/bin/newgidmap &&
            eval 'mkdir -p /etc/lxc || true' &&
            echo "${lxc_conf}" > /etc/lxc/lxc.conf
          - >-
            echo "You need restart lxd to get new subuid,subgid values."

      - event: pre-project
        node: "host"
        flags:
          - setup_lxd_kernel_resources
        commands:
          - >-
            if [ ! -e /etc/modules-load.d/tun.conf ] ; then
              $SUDO mkdir /etc/modules-load.d || true ;
              $SUDO echo "tun" > /etc/modules-load.d/tun.conf
            fi
          - >-
            if [ "$(lsmod | grep tun | wc -l)" != "1" ] ; then
            $SUDO modprobe tun || exit 1 ;
            fi

      {{ if .Values.storage_name }}
      - event: pre-project
        node: "host"
        flags:
          - storage_setup
        commands:
          - >-
            {{- if .Values.storage_render_values }}
            lxd-compose storage create lxd-setup-and-test {{ .Values.storage_name }}
            --render-values {{ .Values.storage_render_values }}
            {{- else }}
            lxd-compose storage create lxd-setup-and-test {{ .Values.storage_name }}
            {{ end }}
      {{ end }}

      - event: pre-project
        node: "host"
        flags:
          - setup_lxd_resources
        commands:
          # The network must be created before profile to avoid issue on create
          # profile that use a specific network.
          - lxd-compose network create lxd-setup-and-test -a

          # The default profile is created automatically so we need to update it.
          - >-
            {{- if .Values.storage_name }}
            lxd-compose profile create lxd-setup-and-test --render-env "default_storage={{ .Values.storage_name }}" -u default &&
            lxd-compose profile create lxd-setup-and-test --render-env "default_storage={{ .Values.storage_name }}" -a
            {{- else }}
            lxd-compose profile create lxd-setup-and-test -a
            {{- end }}


    groups:
      - name: "containers-tests-privileged"
        description: "Start container to verify correct LXC/LXD setup."

        common_profiles:
          - default
          - net-mottainai0
          - privileged

        # Create the environment container as ephemeral or not.
        ephemeral: true
        connection: "{{ .Values.connection }}"

        nodes:
          - name: lxd-test-1
            image_source: "alpine/edge"
            image_remote_server: "images"

            hooks:
              - event: pre-node-sync
                flags:
                  - test
                entrypoint:
                  - /bin/sh
                  - -c
                commands:
                  - ls -l /
                  - poweroff

      - name: "containers-tests-unprivileged"
        description: "Start container to verify correct LXC/LXD setup."

        common_profiles:
          - default
          - net-mottainai0

        # Create the environment container as ephemeral or not.
        ephemeral: true
        connection: "{{ .Values.connection }}"

        nodes:
          - name: lxd-test-unpriv-1
            image_source: "alpine/edge"
            image_remote_server: "images"

            hooks:
              - event: pre-node-sync
                flags:
                  - test
                entrypoint:
                  - /bin/sh
                  - -c
                commands:
                  - ls -l /
                  - poweroff

      - name: "containers-tests-unprivileged-isolated"
        description: |
          Start container to verify correct LXC/LXD setup
          of unprivileged containers with isolation.

        common_profiles:
          - default
          - net-mottainai0

        # Create the environment container as ephemeral or not.
        ephemeral: true
        connection: "{{ .Values.connection }}"

        nodes:
          - name: lxd-test-unpriv-1
            image_source: "alpine/edge"
            image_remote_server: "images"

            config:
              security.idmap.isolated: true

            hooks:
              - event: pre-node-sync
                flags:
                  - test
                entrypoint:
                  - /bin/sh
                  - -c
                commands:
                  - ls -l /
                  - poweroff

          - name: lxd-test-unpriv-swap
            image_source: "alpine/edge"
            image_remote_server: "images"

            config:
              limits.memory: 1GB
              limits.memory.enforce: hard
              limits.memory.swap: false

            hooks:
              - event: pre-node-sync
                flags:
                  - test
                entrypoint:
                  - /bin/sh
                  - -c
                commands:
                  - ls -l /
                  - sleep 1 && poweroff

