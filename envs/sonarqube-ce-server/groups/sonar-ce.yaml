name: "sonarqube-ce-server"
description: "SonarQube server"

# Define the LXD Remote to use and where
# create the environment.
connection: "local"
# Define the list of LXD Profile to use
# for create the containers
common_profiles:
  - default
  # - net-mottainai0

# Create the environment container as ephemeral or not.
ephemeral: true

hooks:

  # DEBUG: Prepare env vars using trick
  - event: post-node-sync
    commands:
      - cat /scripts/debug_init_vars.json
    out2var: "sonar_server_config"

  # Prepare and Run services
  - event: post-node-sync
    commands:
      - chmod +x /scripts/automation_tools.sh
      - chmod +x /scripts/init_sonar.sh
      - chmod +x /scripts/config_sonar_options.sh
      - chmod +x /scripts/prepare_admin_credentials.sh
      - chmod +x /scripts/create_users.sh
      - chmod +x /scripts/init_tokens.sh
      - cd /scripts && ./init_sonar.sh
      - systemctl enable postgresql-10
      - systemctl enable sonarqube
      - source /scripts/automation_tools.sh && eval 'if [ $(has_sonar_already_started) == "0" ]; then systemctl daemon-reload ; fi'
      - source /scripts/automation_tools.sh && eval 'if [ $(has_sonar_already_started) == "0" ]; then systemctl restart postgresql-10 ; fi'
      - source /scripts/automation_tools.sh && eval 'if [ $(has_sonar_already_started) == "0" ]; then systemctl restart sonarqube ; fi'
      - source /scripts/automation_tools.sh && eval 'if [ $(has_sonar_already_started) == "0" ]; then sleep 60 ; fi'

  # Sonarqube provisioning:
  - event: post-node-sync
    commands:
      - cd /scripts && ./prepare_admin_credentials.sh
    out2var: "sonar_admin_token"
  - event: post-node-sync
    commands:
      - echo "$sonar_admin_token" > /tmp/sonar_admin_token
      - cd /scripts && source automation_tools.sh && eval 'if [ $(has_sonar_already_started) == "0" ]; then ./config_sonar_options.sh ; fi'
      # NOTE: flag sonar as started after configuration of admin user and application options
      - cd /scripts && source automation_tools.sh && set_sonar_started
      - cd /scripts && ./create_users.sh
      - cd /scripts && ./init_tokens.sh

nodes:
  - name: sonarqube-ce-server1
    image_source: "lxd-compose/sonarqube-ce-server"
    image_remote_server: "mottainai"

    # Specify directory where build path of templates.
    # Directory could be an absolute path or a relative path based
    # on env base dir.
    source_dir: "./templates"

    #entrypoint:
    #  - "/bin/bash"
    #  - "-c"

    # Define the list of LXD Profile to use in additional
    # to group profiles for create the containers
    # profiles:
    #  - mynode-profile

    # List of commands executed just after the creation of the
    # container.
    # hooks:

    # List of templates files to compiles before push the
    # result inside container.
    config_templates:
      - source: scripts/debug_init_vars.json.j2
        dst: scripts/debug_init_vars.json
      - source: configs/sonar.properties.j2
        dst: configs/sonar.properties
      - source: scripts/init_sonar.sh.j2
        dst: scripts/init_sonar.sh
      - source: scripts/create_users.sh.j2
        dst: scripts/create_users.sh
      - source: scripts/init_tokens.sh.j2
        dst: scripts/init_tokens.sh

    sync_resources:
      # source: File or directory to push
      # dst: File or directory target. For directory is needed "/" at the end
      - source: scripts/debug_init_vars.json
        dst: scripts/debug_init_vars.json
      - source: scripts/init_sonar.sh
        dst: /scripts/init_sonar.sh
      - source: scripts/automation_tools.sh
        dst: /scripts/automation_tools.sh
      - source: scripts/prepare_admin_credentials.sh
        dst: /scripts/prepare_admin_credentials.sh
      - source: scripts/config_sonar_options.sh
        dst: /scripts/config_sonar_options.sh
      - source: scripts/create_users.sh
        dst: /scripts/create_users.sh
      - source: scripts/init_tokens.sh
        dst: /scripts/init_tokens.sh
      - source: configs/sonar.properties
        dst: /opt/sonarqube/conf/sonar.properties
      - source: configs/sonarqube.service
        dst: /etc/systemd/system/sonarqube.service

