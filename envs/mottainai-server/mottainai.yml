# Author: Daniele Rondina, geaaru@sabayonlinux.org
# Description: Setup Mottainai Server Infrastructure

version: "1"

template_engine:
  engine: "mottainai"

# Define the list of LXD Profiles used by all projects.
# This profiles are not mandatory. An user could create and
# handle his profiles without define the list here.
profiles:
- name: "mottainai-https"
  description: "Profile for export HTTPS port to Host"
  devices:
    https:
      bind: host
      connect: tcp:0.0.0.0:443
      listen: tcp:0.0.0.0:443
      nat: false
      proxy_protocol: true
      type: proxy

- name: "mottainai-api"
  description: "Profile for export Mottainai Server port to Host"
  devices:
    api:
      bind: host
      connect: tcp:127.0.0.1:19090
      listen: tcp:0.0.0.0:19090
      type: proxy

- name: "mottainai-dashboard"
  description: "Profile for export Mottainai Dashboard port to Host"
  devices:
    api:
      bind: host
      connect: tcp:127.0.0.1:3000
      listen: tcp:0.0.0.0:3000
      type: proxy

- name: "mottainai-data"
  description: "Mount mottainai data from Host"
  devices:
    storage:
      source: /srv/mottainai/web/storage/
      path: /srv/mottainai/web/storage/
      type: disk

    namespace:
      source: /srv/mottainai/web/namespace/
      path: /srv/mottainai/web/namespace/
      type: disk

    artefacts:
      source: /srv/mottainai/web/artefacts/
      path: /srv/mottainai/web/artefacts/
      type: disk

- name: "arangodb-data"
  description: "Mount ArangoDB data from Host"
  devices:
    arangodbdata:
      source: /var/lib/arangodb3-apps/
      path: /var/lib/arangodb3-apps/
      type: disk

    arangodb:
      source: /var/lib/arangodb3/
      path: /var/lib/arangodb3/
      type: disk

- name: "privileged"
  config:
    security.privileged: "true"
  description: Privileged profile
  devices:
    fuse:
      path: /dev/fuse
      type: unix-char
    tuntap:
      path: /dev/net/tun
      type: unix-char
    # Comment this if zfs is not available.
    zfs:
      path: /dev/zfs
      type: unix-char

- name: "net-mottainai0"
  description: Net mottainai0
  devices:
    eth0:
      name: eth0
      nictype: bridged
      parent: mottainai0
      type: nic

- name: default
  description: Default Storage
  root:
    path: /
    pool: default
    type: disk

- name: flavor-medium
  description: "flavor with 2GB RAM"
  config:
    limits.memory: 2GB

- name: flavor-big
  description: "flavor with 3GB RAM"
  config:
    limits.memory: 3GB

- name: flavor-thin
  description: "flavor with 500MB RAM"
  config:
    limits.memory: 500MB

networks:
  - name: "mottainai0"
    type: "bridge"
    config:
      bridge.driver: native
      dns.domain: mottainai.local
      dns.mode: managed
      ipv4.address: 172.18.10.1/23
      ipv4.dhcp: "true"
      ipv4.firewall: "true"
      ipv4.nat: "true"
      ipv6.nat: "false"
      ipv6.dhcp: "false"

commands:
- name: mottainai-server-only
  description: |
    Create/Update only Mottainai Server.
  project: "mottainai-server-services"
  apply_alias: true
  enable_groups:
    - mottainai-server

- name: mottainai-dashboard-only-prefix
  description: |
    Create/Update only Mottainai Dashboard and
    modify the base url prefix.

    Using `dashboard_prefix` variable to
    customize the path.

  project: "mottainai-server-services"
  apply_alias: true
  enable_groups:
    - mottainai-dashboard
  enable_flags:
    - setup
    - certificate_selfsigned_creation
    - update-mottainai
    - customize-baseurl
    - update-systemd-service
    - configure_certificates
    - restart_service

- name: mottainai-dashboard-only
  description: |
    Create/Update only Mottainai Dashboard.
  project: "mottainai-server-services"
  apply_alias: true
  enable_groups:
    - mottainai-dashboard

- name: mottainai-server-sync-local
  description: |
    Sync mottainai-server binary local to the container.
    (For developers).

    Example:

    lxd-compose command run mottainai-server-services mottainai-server-sync-local \
      -env "MOTTAINAI_BASEDIR=~/dev/mottainai/mottainai-server"

  project: "mottainai-server-services"
  apply_alias: true
  enable_groups:
    - mottainai-server
  enable_flags:
    - setup
    - bootstrap
    - dev_version
    - upgrade
    - config

projects:

  - name: "mottainai-server-services"
    description: |
      Setup Mottainai Server, Dashboard and Database.

    # Environments files to use with engine. Supported files depends on
    # template engine
    include_env_files:
      - vars/common.yml
      - vars/cert.yml
{{ if .Values.mottainai.enable_arangodb_backend }}
      - vars/arangodb.yml
      - vars/mottainai-arangodb.yml
{{ else }}
      - vars/mottainai.yml
{{ end }}
{{ if .Values.mottainai.enable_nginx_frontend }}
      - vars/nginx.yml
{{ end }}

    include_groups_files:
{{ if .Values.mottainai.enable_arangodb_backend }}
      - groups/arangodb.yaml
{{ end }}
      - groups/server.yaml
      - groups/dashboard.yml
      - groups/scheduler.yaml
{{ if .Values.mottainai.enable_nginx_frontend }}
      # Active mottainai-nginx frontend
      - groups/nginx.yml
{{ end }}

    vars:
      - envs:
          ACCEPT_LICENSE: "*"
          LUET_NOLOCK: "true"
          LUET_YES: "true"
          internal_domain: "mottainai.local"
          dashboard_git_url: "https://github.com/MottainaiCI/mottainai-dashboard.git"
          dashboard_git_branch: "main"

          enman_repos:
            - https://get.mocaccino.org/scr/geaaru/geaaru
            - https://get.mocaccino.org/scr/devel/devel

          luet_repositories:
            - repository/mocaccino-extra
            - repository/mocaccino-os-commons-stable

          arangodb_luet_packages:
            - utils/yq

          arangodb_packages:
            - app-metrics/node_exporter

          server_packages:
            - app-editors/vim
            - app-metrics/node_exporter

          server_luet_packages:
            - utils/yq
            - system/entities
            - dev-util/mottainai-server

    hooks:
      - event: post-node-creation
        flags:
          - setup
        commands:
          - sleep 2

          - |
            cat <<EOF >/etc/systemd/network/default_dhcp.network
            [Network]
            DHCP=ipv4

            [Match]
            Name=eth0

            [DHCP]
            UseDomains=true
            EOF

          # Workaround to SystemD issue on setup DHCP network
          - mkdir /etc/systemd/system/systemd-networkd.service.d
          - |
            cat <<EOF >/etc/systemd/system/systemd-networkd.service.d/override.conf
            [Service]
            BindReadOnlyPaths=/sys /proc
            EOF
          - systemctl enable systemd-networkd
          - systemctl restart systemd-networkd

          # DNS
          - echo "Domains=${internal_domain}" >> /etc/systemd/resolved.conf
          - systemctl enable systemd-resolved
          - systemctl restart systemd-resolved
          - cp /var/run/systemd/resolve/resolv.conf /etc/resolv.conf || true
          - systemctl restart systemd-resolved
